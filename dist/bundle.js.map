{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://cardgame/./src/index.ts"],"sourcesContent":["import './css/style.css'\n\nconst screen: any = document.querySelector('.screen')\nconst levelButtons: any = document.querySelectorAll('.level-button')\nconst startButton: any = document.querySelector('.start-button')\n\nlet level: string\nlet cardsPairs: number\nlet cardsPack: { name: string; imagePath: string }[] = []\nconst shirt = './img/shirt.jpg'\nlet hasFlippedCard = false\nlet firstCard: { dataset: { name: string } }, secondCard: { dataset: { name: string } }\nlet score = 0\nlet totalTime: string\nconst winImg = './img/winImg.png'\nconst loseImg = './img/loseImg.png'\n\nlevelButtons.forEach((levelButton: any) => {\n    levelButton.addEventListener('click', () => {\n        startButton.disabled = false\n        level = levelButton.value\n        if (levelButton.value === '1') {\n            cardsPairs = 3\n            levelButtons[0].classList.add('level-button-active')\n            levelButtons[1].classList.remove('level-button-active')\n            levelButtons[2].classList.remove('level-button-active')\n        }\n        if (levelButton.value === '2') {\n            cardsPairs = 6\n            levelButtons[1].classList.add('level-button-active')\n            levelButtons[0].classList.remove('level-button-active')\n            levelButtons[2].classList.remove('level-button-active')\n        }\n        if (levelButton.value === '3') {\n            cardsPairs = 9\n            levelButtons[2].classList.add('level-button-active')\n            levelButtons[0].classList.remove('level-button-active')\n            levelButtons[1].classList.remove('level-button-active')\n        }\n        console.log(cardsPairs)\n    })\n})\n\nstartButton.addEventListener('click', () => {\n    screen.textContent = ''\n    const container = document.createElement('container')\n    container.classList.add('container')\n    screen.appendChild(container)\n    const header = document.createElement('header')\n    header.classList.add('header')\n    container.appendChild(header)\n    const timer = document.createElement('div')\n    timer.classList.add('timer')\n    header.appendChild(timer)\n    const minutes = document.createElement('p')\n    minutes.classList.add('min')\n    minutes.textContent = 'min'\n    const seconds = document.createElement('p')\n    seconds.classList.add('sec')\n    seconds.textContent = 'sec'\n    const time = document.createElement('p')\n    time.classList.add('time')\n    time.textContent = '00.00'\n    timer.appendChild(minutes)\n    timer.appendChild(seconds)\n    timer.appendChild(time)\n    const button = document.createElement('button')\n    button.classList.add('repeat-button')\n    button.textContent = 'Начать заново'\n    header.appendChild(button)\n    const field = document.createElement('div')\n    field.classList.add('cards-field')\n    container.appendChild(field)\n\n    let sec = 0\n    let min = 0\n    let t: string | number | NodeJS.Timeout | undefined\n\n    function tick() {\n        sec++\n        if (sec >= 60) {\n            sec = 0\n            min++\n        }\n    }\n\n    function add() {\n        tick()\n        time.textContent =\n            (min > 9 ? min : '0' + min) + '.' + (sec > 9 ? sec : '0' + sec)\n        start()\n        totalTime = time.textContent\n    }\n\n    function start() {\n        t = setTimeout(add, 1000)\n    }\n\n    setTimeout(start, 5000)\n\n    button.addEventListener('click', () => {\n        window.location.reload()\n    })\n\n    generateField()\n\n    function cardsFieldTemplate(cards: { name: string; imagePath: string }) {\n        const result = document.createElement('div')\n        result.classList.add('card', 'flip')\n        result.setAttribute('data-name', cards.name)\n        const frontFace = document.createElement('img')\n        frontFace.classList.add('front-face')\n        frontFace.setAttribute('src', cards.imagePath)\n        const backFace = document.createElement('img')\n        backFace.classList.add('back-face')\n        backFace.setAttribute('src', shirt)\n        result.appendChild(frontFace)\n        result.appendChild(backFace)\n        return result\n    }\n\n    const fragment = document.createDocumentFragment()\n\n    cardsPack.forEach((cards) => {\n        const cardCell = cardsFieldTemplate(cards)\n        fragment.appendChild(cardCell)\n    })\n\n    field.appendChild(fragment)\n\n    const cards = document.querySelectorAll('.card')\n\n    function flipCard(this: any) {\n        this.classList.add('flip')\n\n        if (!hasFlippedCard) {\n            hasFlippedCard = true\n            firstCard = this\n            return\n        }\n\n        secondCard = this\n        hasFlippedCard = false\n\n        checkForMatch()\n    }\n\n    function checkForMatch() {\n        if (firstCard.dataset.name === secondCard.dataset.name) {\n            score++\n            console.log(score)\n            if (score === cardsPairs) {\n                clearTimeout(t)\n                setTimeout(function () {\n                    renderFinalScreen(winImg, 'Вы выиграли!')\n                }, 300)\n            }\n        } else {\n            clearTimeout(t)\n            setTimeout(function () {\n                renderFinalScreen(loseImg, 'Вы проиграли!')\n            }, 300)\n        }\n    }\n\n    cards.forEach((card) => {\n        if (card.classList.contains('flip')) {\n            setTimeout(function () {\n                card.classList.remove('flip')\n            }, 5000)\n        }\n        card.addEventListener('click', flipCard)\n    })\n})\n\nconst cardsArr = [\n    {\n        name: 'six-clubs',\n        imagePath: './img/6clubs.jpg',\n    },\n    {\n        name: 'seven-clubs',\n        imagePath: './img/7clubs.jpg',\n    },\n    {\n        name: 'eight-clubs',\n        imagePath: './img/8clubs.jpg',\n    },\n    {\n        name: 'nine-clubs',\n        imagePath: './img/9clubs.jpg',\n    },\n    {\n        name: 'ten-clubs',\n        imagePath: './img/10clubs.jpg',\n    },\n    {\n        name: 'jack-clubs',\n        imagePath: './img/jackClubs.jpg',\n    },\n    {\n        name: 'queen-clubs',\n        imagePath: './img/queenClubs.jpg',\n    },\n    {\n        name: 'king-clubs',\n        imagePath: './img/kingClubs.jpg',\n    },\n    {\n        name: 'ace-clubs',\n        imagePath: './img/aceClubs.jpg',\n    },\n    {\n        name: 'six-diamonds',\n        imagePath: './img/8diamonds.jpg',\n    },\n    {\n        name: 'seven-diamonds',\n        imagePath: './img/7diamonds.jpg',\n    },\n    {\n        name: 'eight-diamonds',\n        imagePath: './img/8diamonds.jpg',\n    },\n    {\n        name: 'nine-diamonds',\n        imagePath: './img/9diamonds.jpg',\n    },\n    {\n        name: 'ten-diamonds',\n        imagePath: './img/10diamonds.jpg',\n    },\n    {\n        name: 'jack-diamonds',\n        imagePath: './img/jackDiamonds.jpg',\n    },\n    {\n        name: 'queen-diamonds',\n        imagePath: './img/queenDiamonds.jpg',\n    },\n    {\n        name: 'king-diamonds',\n        imagePath: './img/kingDiamonds.jpg',\n    },\n    {\n        name: 'ace-diamonds',\n        imagePath: './img/aceDiamonds.jpg',\n    },\n    {\n        name: 'six-hearts',\n        imagePath: './img/6hearts.jpg',\n    },\n    {\n        name: 'seven-hearts',\n        imagePath: './img/7hearts.jpg',\n    },\n    {\n        name: 'eight-hearts',\n        imagePath: './img/8hearts.jpg',\n    },\n    {\n        name: 'nine-hearts',\n        imagePath: './img/9hearts.jpg',\n    },\n    {\n        name: 'ten-hearts',\n        imagePath: './img/10hearts.jpg',\n    },\n    {\n        name: 'jack-hearts',\n        imagePath: './img/jackHearts.jpg',\n    },\n    {\n        name: 'queen-hearts',\n        imagePath: './img/queenHearts.jpg',\n    },\n    {\n        name: 'king-hearts',\n        imagePath: './img/kingHearts.jpg',\n    },\n    {\n        name: 'ace-hearts',\n        imagePath: './img/aceHearts.jpg',\n    },\n    {\n        name: 'six-spades',\n        imagePath: './img/6spades.jpg',\n    },\n    {\n        name: 'seven-spades',\n        imagePath: './img/7spades.jpg',\n    },\n    {\n        name: 'eight-spades',\n        imagePath: './img/8spades.jpg',\n    },\n    {\n        name: 'nine-spades',\n        imagePath: './img/9spades.jpg',\n    },\n    {\n        name: 'ten-spades',\n        imagePath: './img/10spades.jpg',\n    },\n    {\n        name: 'jack-spades',\n        imagePath: './img/jackSpades.jpg',\n    },\n    {\n        name: 'queen-spades',\n        imagePath: './img/queenSpades.jpg',\n    },\n    {\n        name: 'king-spades',\n        imagePath: './img/kingSpades.jpg',\n    },\n    {\n        name: 'ace-spades',\n        imagePath: './img/aceSpades.jpg',\n    },\n]\n\nfunction generateField() {\n    let fieldLength = 0\n    const totalCards = cardsArr.length\n    if (level === '1') {\n        fieldLength = 6\n    }\n    if (level === '2') {\n        fieldLength = 12\n    }\n    if (level === '3') {\n        fieldLength = 18\n    }\n    let i = 0\n    while (i < fieldLength / 2) {\n        let randomIndex = getRandomInt(totalCards)\n        if (!cardsPack.includes(cardsArr[randomIndex])) {\n            cardsPack.push(cardsArr[randomIndex])\n            cardsPack.push(cardsArr[randomIndex])\n            i++\n        }\n    }\n    cardsPack.sort(function () {\n        return 0.5 - Math.random()\n    })\n    console.log(cardsPack)\n}\n\nfunction getRandomInt(max: number) {\n    return Math.floor(Math.random() * max)\n}\n\nfunction renderFinalScreen(img: string, text: string) {\n    const finalScreen = document.createElement('div')\n    finalScreen.classList.add('final-screen')\n    screen.appendChild(finalScreen)\n\n    const finalBlock = document.createElement('div')\n    finalBlock.classList.add('difficulty-level')\n    finalScreen.appendChild(finalBlock)\n\n    const finalImg = document.createElement('img')\n    finalImg.setAttribute('src', img)\n    finalImg.classList.add('final-img')\n    finalBlock.appendChild(finalImg)\n\n    const finalTitle = document.createElement('h2')\n    finalTitle.classList.add('final-title')\n    finalTitle.textContent = text\n    finalBlock.appendChild(finalTitle)\n\n    const elapsedTime = document.createElement('p')\n    elapsedTime.classList.add('elapsed-time')\n    elapsedTime.textContent = 'Затраченное время:'\n    finalBlock.appendChild(elapsedTime)\n\n    const finalTime = document.createElement('h1')\n    finalTime.classList.add('final-time')\n    finalTime.textContent = totalTime\n    finalBlock.appendChild(finalTime)\n\n    const finalButton = document.createElement('button')\n    finalButton.classList.add('final-button')\n    finalButton.textContent = 'Играть снова'\n    finalBlock.appendChild(finalButton)\n\n    finalButton.addEventListener('click', () => {\n        document.location.reload()\n    })\n\n    return finalScreen\n}\n"],"names":["level","cardsPairs","firstCard","secondCard","totalTime","screen","document","querySelector","levelButtons","querySelectorAll","startButton","cardsPack","hasFlippedCard","score","forEach","levelButton","addEventListener","disabled","value","classList","add","remove","console","log","textContent","container","createElement","appendChild","header","timer","minutes","seconds","time","button","field","t","sec","min","start","setTimeout","window","location","reload","fieldLength","totalCards","cardsArr","length","max","i","randomIndex","Math","floor","random","includes","push","sort","generateField","fragment","createDocumentFragment","flipCard","this","dataset","name","clearTimeout","renderFinalScreen","cards","cardCell","result","setAttribute","frontFace","imagePath","backFace","cardsFieldTemplate","card","contains","img","text","finalScreen","finalBlock","finalImg","finalTitle","elapsedTime","finalTime","finalButton"],"sourceRoot":""}